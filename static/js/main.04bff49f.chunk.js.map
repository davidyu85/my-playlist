{"version":3,"sources":["components/TitleBar.tsx","components/MovieList.tsx","components/SearchPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TitleBar","styled","div","ScreenButton","button","MovieListWrapper","MovieBlock","MovieTitle","MovieList","list","map","movie","Poster","src","alt","Title","imdbID","SearchBar","SearchInput","input","SearchButton","NoResult","span","SearchPage","searchInput","useRef","useState","keyword","page","search","setSearch","movies","setMovies","useEffect","axios","then","data","console","log","Search","onClick","alert","current","value","aria-label","size","ref","onKeyPress","e","key","target","placeholder","length","Footer","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAEaA,EAAWC,IAAOC,IAAV,kNAYRC,EAAeF,IAAOG,OAAV,6O,OCVnBC,EAAmBJ,IAAOC,IAAV,kQAahBI,EAAaL,IAAOC,IAAV,2TAoBVK,EAAaN,IAAOC,IAAV,8JAmCDM,EAXG,SAAC,GAAD,QAAGC,YAAH,MAAU,GAAV,SAChB,cAACJ,EAAD,UACGI,EAAKC,KAAI,SAACC,GAAD,OACR,eAACL,EAAD,WACGK,EAAMC,QAAU,qBAAKC,IAAKF,EAAMC,OAAQE,IAAI,KAC7C,cAACP,EAAD,UAAaI,EAAMI,UAFJJ,EAAMK,cCtDvBC,EAAYhB,IAAOC,IAAV,8GAOTgB,EAAcjB,IAAOkB,MAAV,6QAkBXC,EAAenB,IAAOG,OAAV,mJASZiB,EAAWpB,IAAOqB,KAAV,4CA6DCC,EArDI,WACjB,IAAMC,EAAcC,iBAAyB,MADR,EAGTC,mBAA4C,CAAEC,QAAS,MAAOC,KAAM,IAH3D,mBAG9BC,EAH8B,KAGtBC,EAHsB,OAITJ,mBAAkB,IAJT,mBAI9BK,EAJ8B,KAItBC,EAJsB,KAMrCC,qBAAU,WACRC,IAAM,8BAAD,OAA+BL,EAAOF,QAAtC,mBAnDU,WAmDV,iBAA2EE,EAAOD,OACpFO,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPC,QAAQC,IAAIF,GACZJ,EAAUI,EAAKG,aAElB,CAACV,IAaJ,OACI,qCACE,eAAC7B,EAAD,WACE,cAACG,EAAD,uBAIA,eAACc,EAAD,WACE,cAACG,EAAD,CAAcoB,QAnBJ,WAAO,IAAD,IACxBC,MAAK,QAAE,EAAAjB,EAAYkB,eAAd,aAAC,EAA2CC,OACjDb,EAAU,CAAEH,QAAO,UAAGH,EAAYkB,eAAf,aAAE,EAA2CC,MAAOf,KAAM,KAiBjCgB,aAAW,SAA/C,SACE,cAAC,IAAD,CAAUC,KAAM,OAElB,cAAC3B,EAAD,CACE4B,IAAKtB,EACLuB,WAnBe,SAACC,GACZ,UAAVA,EAAEC,KACJnB,EAAU,CAAEH,QAAUqB,EAAEE,OAA4BP,MAAOf,KAAM,KAkBzDgB,aAAW,gBACXO,YAAY,+CAKlB,cAAC,EAAD,CAAW1C,KAAMsB,IAEhBA,GAA4B,IAAlBA,EAAOqB,QAAgB,cAAC/B,EAAD,iCACjCQ,EAAOF,QAAQyB,OAAS,GAAK,cAAC/B,EAAD,uEC5FhCgC,EAASpD,IAAOC,IAAV,6KAwBGoD,MAbf,WACE,OACE,qCACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,QAE3B,eAACH,EAAD,mCAnBU,SAmBV,W,gBCXSI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.04bff49f.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const TitleBar = styled.div`\n  position: fixed;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  background: #500;\n  color: #fff;\n  padding: 0;\n  width: 100%;\n  z-index: 100;\n`;\n\nexport const ScreenButton = styled.button`\n  background-color: #a00;\n  color: white;\n  border: 0;\n  border-radius: 0;\n  padding: 1.5rem 1rem;\n  width: 6rem;\n\n  &:hover,\n  &:focus {\n    background-color: #c00;\n    outline: 0 !important;\n  }\n`;","import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\n\n\nconst MovieListWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  width: calc(100% - 4rem);\n  padding: 5rem 1.5rem 1.5rem 1.5rem;\n\n  @media (min-width: 600px) {\n    justify-content: flex-start;\n  }\n`;\n\nconst MovieBlock = styled.div`\n  position: relative;\n  background-color: #333;\n  color: #fff;\n  margin: .75rem;\n  width: 12rem;\n  height: 17rem;\n  overflow: hidden;\n  text-align: left;\n\n  img {\n    width: 100%;\n    height: auto;\n  }\n\n  &:hover {\n    box-shadow: 0 0 1rem 1rem rgba(255, 0, 0, .3);\n  }\n`;\n\nconst MovieTitle = styled.div`\n  position: absolute;\n  bottom: 0;\n\n  background-color: rgba(40, 0, 0, .75);\n  width: 10rem;\n  padding: 1rem;\n  margin: 0;\n`;\nexport interface Movie {\n  // List of properties from OMDb API.\n  // TODO: This should be listed out or find an already provided version.\n  [key: string]: string;\n}\ninterface MovieListProps {\n  // Array of \"Search\" object from OMDb.\n  list: Movie[];\n}\n\n/**\n * Show the list of movies.\n * @param MovieListProps\n * @returns ReactElement\n */\nconst MovieList = ({ list = [] }: MovieListProps): ReactElement => (\n  <MovieListWrapper>\n    {list.map((movie: Movie): ReactElement => (\n      <MovieBlock key={movie.imdbID}>\n        {movie.Poster && <img src={movie.Poster} alt=\"\" />}\n        <MovieTitle>{movie.Title}</MovieTitle>\n      </MovieBlock>\n    ))}\n  </MovieListWrapper>\n);\n\nexport default MovieList;","import React, { useEffect, useState, useRef, KeyboardEvent, ReactElement } from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport { MdSearch } from 'react-icons/md';\n\nimport { TitleBar, ScreenButton } from './TitleBar';\nimport MovieList, { Movie } from './MovieList';\n\nconst omdbApiKey = 'bce2b2d3';\n\nconst SearchBar = styled.div`\n  width: 100%;\n  margin: 1rem 1.5rem;\n  display: flex;\n  align-items: center;\n`;\n\nconst SearchInput = styled.input`\n  width: calc(100% - 50px);\n  border: 0;\n  border-radius: 0;\n  background-color: #800;\n  padding: 0.5rem 0.2rem;\n  margin: 0;\n  color: #fff;\n\n  &:focus {\n    outline: 0 !important;\n  }\n\n  &::placeholder {\n    color: #c88;\n  }\n`;\n\nconst SearchButton = styled.button`\n  background-color: #800;\n  border: 0;\n  border-radius: 0;\n  padding: 0.2rem .5rem;\n  margin: 0;\n  color: white;\n`;\n\nconst NoResult = styled.span`\n  color: #fff;\n`;\n\n/**\n * Page searching movies from OMDb.\n * @returns ReactElement\n */\nconst SearchPage = (): ReactElement => {\n  const searchInput = useRef<HTMLInputElement>(null);\n\n  const [search, setSearch] = useState<{ keyword: string, page: number }>({ keyword: 'aaa', page: 1 });\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  useEffect(() => {\n    axios(`https://www.omdbapi.com/?s=${search.keyword}&apikey=${omdbApiKey}&page=${search.page}`)\n      .then(({ data }) => {\n        console.log(data);\n        setMovies(data.Search);\n      });\n  }, [search]);\n\n  const searchMovie = () => {\n    alert((searchInput.current as HTMLInputElement)?.value);\n    setSearch({ keyword: (searchInput.current as HTMLInputElement)?.value, page: 1 })\n  };\n\n  const searchMovieByEnter = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      setSearch({ keyword: (e.target as HTMLInputElement).value, page: 1 })\n    }\n  };\n\n  return (\n      <>\n        <TitleBar>\n          <ScreenButton>\n            Playlist\n          </ScreenButton>\n\n          <SearchBar>\n            <SearchButton onClick={searchMovie} aria-label=\"Search\">\n              <MdSearch size={21} />\n            </SearchButton>\n            <SearchInput\n              ref={searchInput}\n              onKeyPress={searchMovieByEnter}\n              aria-label=\"Enter keyword\"\n              placeholder=\"Enter keyword - minimum 3 characters\"\n            />\n          </SearchBar>\n        </TitleBar>\n\n        <MovieList list={movies} />\n\n        {movies && movies.length === 0 && <NoResult>Search no results.</NoResult>}\n        {search.keyword.length < 3 && <NoResult>Minimum 3 characters required for search to proceed.</NoResult>}\n      </>\n  );\n};\n\nexport default SearchPage;","import React from 'react';\nimport styled from 'styled-components';\nimport { Routes, Route } from \"react-router-dom\";\n\nimport SearchPage from './components/SearchPage';\n\nconst myColor = 'maroon';\n\nconst Footer = styled.div`\n  position: fixed;\n  bottom: 0;\n  display: flex;\n  background-color: #600;\n  color: #faa;\n  width: 100%;\n  margin: 0;\n  padding: 0.5rem;\n`;\n\nfunction App() {\n  return (\n    <>\n      <Routes>\n        <Route path=\"/\" element={<SearchPage />} />\n      </Routes>\n      <Footer>\n        My favorite color is {myColor}.\n      </Footer>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport { HashRouter } from \"react-router-dom\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}